basePath: /
consumes:
- application/json
definitions:
  request.CreateAddressReq:
    properties:
      country:
        type: string
      fullName:
        type: string
      state:
        type: string
      streetAddress:
        type: string
      zip:
        type: string
    required:
    - country
    - fullName
    - state
    - streetAddress
    - zip
    type: object
  request.CreateUserRequest:
    properties:
      confirmPassword:
        maxLength: 30
        minLength: 5
        type: string
      email:
        type: string
      password:
        maxLength: 30
        minLength: 5
        type: string
      telephone:
        type: string
      username:
        maxLength: 30
        minLength: 5
        type: string
    required:
    - email
    - telephone
    type: object
  request.LoginRequest:
    properties:
      password:
        maxLength: 30
        minLength: 5
        type: string
      username:
        maxLength: 10
        minLength: 5
        type: string
    required:
    - username
    type: object
  request.ModifyUser:
    properties:
      address:
        $ref: '#/definitions/request.CreateAddressReq'
      telephone:
        maxLength: 16
        minLength: 5
        type: string
      username:
        maxLength: 30
        minLength: 5
        type: string
    required:
    - address
    type: object
  response.ErrorResponse:
    properties:
      cause:
        default: Something went wrong
        type: string
      code:
        default: 500
        type: integer
      success:
        default: false
        type: boolean
    type: object
  response.RequestResponse:
    properties:
      code:
        default: 200
        type: integer
      message:
        default: Operation Successful!
        type: string
      path:
        default: "0"
        type: string
      result: {}
      success:
        default: true
        type: boolean
      timeStamp:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: elyte5star@gmail.com
    name: Elyte Fiber Application.
    url: https://github.com/elyte5star.
  description: Interactive Documentation for Elyte-Realm API
  license:
    name: Proprietary
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Elyte Realm API
  version: 1.0.1
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Create a new bearer token.
      parameters:
      - description: Login data
        in: body
        name: credential
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.RequestResponse'
      summary: Create a new bearer token
      tags:
      - Auth
  /api/status:
    get:
      description: API status check
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.RequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Health Check
      tags:
      - API
  /api/users:
    put:
      consumes:
      - application/json
      description: Update User.
      parameters:
      - description: userid
        in: path
        name: userid
        required: true
        type: string
      - description: Modify User
        in: body
        name: modify_user
        required: true
        schema:
          $ref: '#/definitions/request.ModifyUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.RequestResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user
      tags:
      - User
  /api/users/:
    get:
      consumes:
      - application/json
      description: Get all existing users.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.RequestResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all existing users
      tags:
      - User
  /api/users/{userid}:
    delete:
      consumes:
      - application/json
      description: Delete user by a given userid.
      parameters:
      - description: userid
        in: path
        name: userid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.RequestResponse'
      security:
      - BearerAuth: []
      summary: Delete user by given userid
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Get User by given ID.
      parameters:
      - description: userid
        in: path
        name: userid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.RequestResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by given userid
      tags:
      - User
  /api/users/signup:
    post:
      consumes:
      - application/json
      description: Create a new user.
      parameters:
      - description: Create User
        in: body
        name: create_user
        required: true
        schema:
          $ref: '#/definitions/request.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.RequestResponse'
      summary: Create a new user
      tags:
      - User
produces:
- application/json
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Bearer Token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
